#!/usr/bin/env python

import sys
import json
import random
import datetime
import requests
import os
import time
from subprocess import call

def speech(text):
    global o
    o["speech"] = {"text": text}

# Set Homeassistant URL
hassurl, hassauth = "http://10.0.0.200:8123", "yourauthkey"
hassheaders = {"Authorization": "Bearer " + hassauth, "content-type": "application/json",}

# Set OpenWeatherMap data
opnwthrurl, opnwthrauth, opnwthrlat, opnwthrlon, opnwthrunits = "https://api.openweathermap.org/data/2.5/weather?", "yourauthkey", "yourlat" , "yourlong", "metric"

# Set paths
workingDir = "/profiles/"
stopTimerSoundFilePath, timerLeftPath, cancelFilePath, bluetoothFilePath = workingDir+"stopTimerSoundFile", workingDir+"timerLeft", workingDir+"cancelFile", workingDir+"bluetoothFile"

# Set responses
agreeResponse, currentlyResponse = ["Okay, ", "Alright, ", "Will do. ", "Got it, ", "Sure, "], ["Right now it's ", "Its ", "Currently its ", "At the moment its "]

# get json from stdin and load into python dict
o = json.loads(sys.stdin.read())

intent = o["intent"]["name"]

if intent == "GetTime":
    now = datetime.datetime.now()
    if now.strftime('%p') == "PM":
        apm = "peey em"
    else:
        apm = "ey em"
    if now.strftime('%M') == 00:
        speech(random.choice(currentlyResponse) + now.strftime('%I') + " " + apm)
    else:
        speech(random.choice(currentlyResponse) + now.strftime('%I') + " " + now.strftime('%M') + " " + apm) 

elif intent == "Greet":
    replies = ['Hi!', 'Hello!', 'Hey there!', 'Greetings.']
    speech(random.choice(replies))

elif intent == "SetSpecificLightPower":
    entity, state = o["slots"]["entity"], o["slots"]["state"]
    speech(random.choice(agreeResponse) + "I'll turn it " + state )
    requests.post(hassurl+"/api/events/assistant_"+intent, headers = hassheaders, json = {"entity": entity,"state": state})

elif intent == "SetSpecificLightColour":
    entity, colour = o["slots"]["entity"], o["slots"]["colour"]
    speech(random.choice(agreeResponse) + "I'll make it " + colour )
    requests.post(hassurl+"/api/events/assistant_"+intent, headers = hassheaders, json = {"entity": entity,"colour": colour})

elif intent == "SetSpecificLightBrightness":
    entity, brightness = o["slots"]["entity"], o["slots"]["brightness"]
    speech(random.choice(agreeResponse) + "I'll make it " + str(brightness) + " percent")
    requests.post(hassurl+"/api/events/assistant_"+intent, headers = hassheaders, json = {"entity": entity,"brightness": brightness})

elif intent == "DoMaths":
    operator, num1, num2 = o["slots"]["operator"], o["slots"]["num1"], o["slots"]["num2"]
    if operator == "*":
        calcResult = str(num1*num2)
    elif operator == "+":
        calcResult = str(num1+num2)
    elif operator == "-":
        calcResult = str(num1-num2)
    elif operator == "/":
        calcResult = str(num1/num2)
    if num1 == 9 and num2 == 10 and operator == "+":
        speech("That's 21")
    else:
        speech("That's " + calcResult.replace("." , " point "))

elif intent == "DoTimer":
    timerFinishedAudio = workingDir+"timerchime.wav"
    number, unit = o["slots"]["time"], o["slots"]["unit"]
    if os.path.exists(stopTimerSoundFilePath):
        os.remove(stopTimerSoundFilePath)
    if os.path.exists(cancelFilePath):
        os.remove(cancelFilePath)
    if unit == "second":
        timerLength = number-1
    elif unit == "minute":
        timerLength = (number*60)-1
    while timerLength:
        time.sleep(1)
        timerLength -=1
        timerLeft = open(timerLeftPath, "w")
        timerLeft.write(str(timerLength))
        if os.path.exists(cancelFilePath):
            break
    while not os.path.exists(stopTimerSoundFilePath):
        if os.path.exists(cancelFilePath):
            speech("Timer cancelled")
            break
        else:
            call(["aplay", timerFinishedAudio])
    if os.path.exists(stopTimerSoundFilePath):
        os.remove(stopTimerSoundFilePath)
    if os.path.exists(timerLeftPath):
        timerLeft.close()
        os.remove(timerLeftPath)
    if os.path.exists(cancelFilePath):
        os.remove(cancelFilePath)
        
elif intent == "StopTimerSound":
    with open(stopTimerSoundFilePath, 'w') as stopTimerSoundFile:
        pass

elif intent == "TimerRemaining":
    if os.path.exists(timerLeftPath):
        timerRemainingNumber = int(open(timerLeftPath, "r").read()) - 3
        if timerRemainingNumber >= 60:
            speech("There are " + str(math.trunc(timerRemainingNumber/60)) + " minutes and " + str(timerRemainingNumber % 60) + " seconds left")
        else:
            speech("There are " + str(timerRemainingNumber) + " seconds left")
    else:
        speech("You've got no timers set")

elif intent == "CancelTimer":
    with open(cancelFilePath, "w") as cancelFile:
        pass

elif intent == "GetWeather":
    weather = requests.get(opnwthrurl+"lat="+opnwthrlat+"&lon="+opnwthrlon+"&units="+opnwthrunits+"&appid="+opnwthrauth).json()
    currentTemp, currentDesc = weather["main"]["temp"], weather["weather"][0]["main"]
    speech(random.choice(currentlyResponse) + str(round(currentTemp)) + " degrees and " + currentDesc)

elif intent == "BluetoothPairing":
    speech("Turning on bluetooth pairing")
    with open(bluetoothFilePath, "w") as bluetoothFile:
        time.sleep(3)
        os.remove(bluetoothFilePath)

elif intent == "UnitConversion":
    number, unit1, unit2 = float(o["slots"]["number"]), o["slots"]["unit1"], o["slots"]["unit2"]
# Length
    if unit1 == "metres":
        toBeConverted = number
    elif unit1 == "kilometres":
        toBeConverted = number*1000
    elif unit1 == "centimetres":
        toBeConverted = number/100
    elif unit1 == "millimetres":
        toBeConverted = number/1000
    elif unit1 == "miles":
        toBeConverted = number*1609.344
    elif unit1 == "feet":
        toBeConverted = number*0.3048
    elif unit1 == "inches":
        toBeConverted = number*0.0254
    elif unit1 == "yards":
        toBeConverted = number*0.9144

# Mass
    elif unit1 == "kilograms":
        toBeConverted = number
    elif unit1 == "tons":
        toBeConverted = number*1000
    elif unit1 == "grams":
        toBeConverted = number/1000
    elif unit1 == "ounces":
        toBeConverted = number*0.02834
    elif unit1 == "pounds":
        toBeConverted = number*0.4535
    elif unit1 == "stones":
        toBeConverted = number*6.35029

# Volume
    elif unit1 == "litres":
        toBeConverted = number
    elif unit1 == "millilitres":
        toBeConverted = number/1000
    elif unit1 == "centilitres":
        toBeConverted = number/100
    elif unit1 == "fluid ounces":
        toBeConverted = number*0.02841

# Doing the conversion
    if unit2 == "kilometres":
        finalValue = toBeConverted/1000
    elif unit2 == "metres":
        finalValue = toBeConverted
    elif unit2 == "centimetres":
        finalValue = toBeConverted*100
    elif unit2 == "millimetres":
        finalValue = toBeConverted*1000
    elif unit2 == "miles":
        finalValue = toBeConverted/1609.344
    elif unit2 == "feet":
        finalValue = toBeConverted*3.28084
    elif unit2 == "inches":
        finalValue = toBeConverted*39.37
    elif unit2 == "yards":
        finalValue = toBeConverted*1.093613

    elif unit2 == "tons":
        finalValue = toBeConverted/1000
    elif unit2 == "kilograms":
        finalValue = toBeConverted
    elif unit2 == "grams":
        finalValue = toBeConverted*1000
    elif unit2 == "ounces":
        finalValue = toBeConverted*35.27396
    elif unit2 == "pounds":
        finalValue = toBeConverted*2.2046
    elif unit2 == "stones":
        finalValue = toBeConverted*0.15747

    elif unit2 == "litres":
        finalValue = toBeConverted
    elif unit2 == "millilitres":
        finalValue = toBeConverted*1000
    elif unit2 == "centilitres":
        finalValue = toBeConverted*100
    elif unit2 == "fluid ounces":
        finalValue = toBeConverted*35.195

    speech(str(number) + " " + unit1 + " is " + str(round(finalValue,3)).replace("." , " point ") + " " + unit2)
        
# convert dict to json and print to stdout
print(json.dumps(o))
