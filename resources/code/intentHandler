#!/usr/bin/env python

import sys
import json
import random
from datetime import datetime
import requests
import os
import time
from subprocess import call
import math

def speech(text):
  requests.post("http://PI-IP:12101/api/text-to-speech", headers = {"content-type": "text/plain"}, data = text)

# Set paths
workingDir = "/profiles/"
tmpDir = workingDir + "tmp/"
stopTimerFilePath = tmpDir+"stopTimerFile"
timerLeftPath = tmpDir+"timerLeft"
bluetoothFilePath = tmpDir+"bluetoothFile"
currentMediaPath = tmpDir+"currentMedia"
jellyfinPlayFilePath = tmpDir+"jellyfinPlay"
jellyfinResumeFilePath = tmpDir+"jellyfinResume"
jellyfinStopFilePath = tmpDir+"jellyfinStop"
jellyfinPauseFilePath = tmpDir+"jellyfinPause"
songInfoFilePath = tmpDir+"songInfoFile"

# Set responses
agreeResponse = ("Okay, ", "Alright, ", "Will do. ", "Got it, ", "Sure, ")
currentlyResponse = ("Right now it's ", "Its ", "Currently its ", "At the moment its ")
morningResponse = (" in the morning", " ey em")
eveningResponse = (" in the afternoon", " in the evening", " peey em")

# Set Homeassistant URL
hassurl = "http://PI-IP:8123"
hassauth = "auth"
hassheaders = {"Authorization": "Bearer " + hassauth, "content-type": "application/json",}

# get json from stdin and load into python dict
o = json.loads(sys.stdin.read())

intent = o["intent"]["name"]

if intent == "GetTime":
    now = datetime.now()
    if now.strftime('%p') == "PM":
        apm = random.choice(eveningResponse)
    else:
        apm = random.choice(morningResponse)
    if now.strftime('%M') == 00:
        speech("Its " + now.strftime('%I') + " " + apm)
    else:
        speech(random.choice(currentlyResponse) + now.strftime('%I') + " " + now.strftime('%M') + " " + apm)

elif intent == "Greet":
    replies = ('Hi!', 'Hello!', 'Hey there!', 'Greetings.')
    speech(random.choice(replies))

elif intent == "SetSpecificLightPower":
    entity = o["slots"]["entity"]
    state = o["slots"]["state"]
    requests.post(hassurl+"/api/events/assistant_"+intent, headers = hassheaders, json = {"entity": entity,"state": state})
    speech(random.choice(agreeResponse) + "I'll turn it " + state )

elif intent == "SetSpecificLightColour":
    entity = o["slots"]["entity"]
    colour = o["slots"]["colour"]
    requests.post(hassurl+"/api/events/assistant_"+intent, headers = hassheaders, json = {"entity": entity,"colour": colour})
    speech(random.choice(agreeResponse) + "I'll make it " + colour )

elif intent == "SetSpecificLightBrightness":
    entity = o["slots"]["entity"]
    brightness = o["slots"]["brightness"]
    requests.post(hassurl+"/api/events/assistant_"+intent, headers = hassheaders, json = {"entity": entity,"brightness": brightness})
    speech(random.choice(agreeResponse) + "I'll make it " + str(brightness) + " percent")

elif intent == "DoMaths":
  operator, num1, num2 = o["slots"]["operator"], o["slots"]["num1"], o["slots"]["num2"]
  if operator == "*":
    operator = " times "
    calcResult = str(num1*num2)
  elif operator == "+":
    operator = " add "
    calcResult = str(num1+num2)
  elif operator == "-":
    operator = " minus "
    calcResult = str(num1-num2)
  elif operator == "/":
    operator = " over "
    calcResult = str(num1/num2)
  if num1 == 9 and num2 == 10 and operator == " add ":
    speech("9 plus 10 is 21")
  else:
    speech(str(num1) + operator + str(num2) + " is " + calcResult.replace("." , " point "))

elif intent == "DoTimer":
  timerFinishedAudio = workingDir+"timerchime.wav"
  timerCancelResponse = ["Timer cancelled", "Cancelling timer", "I'll cancel the timer"]
  if os.path.exists(stopTimerFilePath):
    os.remove(stopTimerFilePath)
  if os.path.exists(timerLeftPath):
    speech("There's already a timer running")
    exit()
  number, unit = o["slots"]["time"], o["slots"]["unit"]
  speech(random.choice(agreeResponse) + "i'll set a " + str(number) + " " + unit + " timer")
  if unit == "second":
    timerLength = number-1
  elif unit == "minute":
    timerLength = (number*60)-1
  while timerLength:
    time.sleep(1)
    timerLength -=1
    timerLeft = open(timerLeftPath, "w")
    timerLeft.write(str(timerLength))
    if os.path.exists(stopTimerFilePath):
      speech(random.choice(timerCancelResponse))
      break
  while not os.path.exists(stopTimerFilePath):
    if os.path.exists(stopTimerFilePath):
      break
    else:
      call(["aplay", timerFinishedAudio])
  if os.path.exists(stopTimerFilePath):
    os.remove(stopTimerFilePath)
  if os.path.exists(timerLeftPath):
    os.remove(timerLeftPath)

elif intent == "StopTimer":
  if os.path.exists(timerLeftPath):
    stopTimerFile = open(stopTimerFilePath, 'w')
    stopTimerFile.close()
  else:
    speech("You've got no timers set")

elif intent == "TimerRemaining":
  if os.path.exists(timerLeftPath):
    timerRemainingNumber = int(open(timerLeftPath, "r").read()) - 3
    if timerRemainingNumber >= 60:
      speech("There are " + str(math.trunc(timerRemainingNumber/60)) + " minutes and " + str(timerRemainingNumber % 60) + " seconds left")
    else:
      speech("There are " + str(timerRemainingNumber) + " seconds left")
  else:
    speech("You've got no timers set")

elif intent == "GenericStop":
  open(stopTimerFilePath, "w")
  open(jellyfinStopFilePath, "w")

elif intent == "GetWeather":
  opnwthrurl = "https://api.openweathermap.org/data/2.5/weather?"
  opnwthrauth = "auth"
  opnwthrlat, opnwthrlon = "lat" , "long"
  opnwthrunits = "metric"
  weather = requests.get(opnwthrurl+"lat="+opnwthrlat+"&lon="+opnwthrlon+"&units="+opnwthrunits+"&appid="+opnwthrauth).json()
  currentTemp = weather["main"]["temp"]
  currentDesc = weather["weather"][0]["description"]
  speech(random.choice(currentlyResponse) + str(round(currentTemp)) + " degrees and " + currentDesc)

elif intent == "GetDate":
  months = [" January ", " February ", " March ", " April ", " May ", " June ", " July ", " August ", " September ", " October ", " November ", " December "]
  weekdays = [" Monday ", " Tuesday ", " Wednesday ", " Thursday ", " Friday ", " Saturday ", " Sunday "]
  dayNum = datetime.now().day
  month = months[(datetime.now().month)-1]
  weekday = weekdays[datetime.today().weekday()]
  speech("Today, it's" + weekday + "the " + str(dayNum) + " of" + month)

elif intent == "BluetoothPairing":
    bleutoothFile = open(bluetoothFilePath, "w") 
    time.sleep(0.1)
    bluetoothFile.close()
    os.remove(bluetoothFilePath)
    speech("Turning on bluetooth pairing")

elif intent == "JellyfinPlaybackCtrl":
  if not os.path.exists(currentMediaPath):
    speech("No songs are playing")
  playback = o["slots"]["playback"]
  if playback == "continue" or playback == "resume" or playback == "unpause":
    jellyfinResume = open(jellyfinResumeFilePath, "w")
    jellyfinResume.close()
  if playback == "pause":
    jellyfinPause = open(jellyfinPauseFilePath, "w")
    jellyfinPause.close()
  if playback == "stop":
    jellyfinStop = open(jellyfinStopFilePath, "w")
    jellyfinStop.close()

elif intent == "JFGetPlayingMediaName":
  if not os.path.exists(currentMediaPath):
    speech("No songs are playing")
  songInfoFile = open(songInfoFilePath, "r").read()[1:-1].replace("'","").split(",")
  songName, songArtist = songInfoFile[0], songInfoFile[1]
  speech("This is " + songName + " by " + songArtist)

elif intent == "JellyfinPlay":
  # Set Variables
  jellyfinurl, jellyfinauth, userid = "https://JF-URL", "auth", "uid"
  headers = {"X-Emby-Token": jellyfinauth,}
  songsList = [[],[]]
  ps, itemid, q = o["slots"]["ps"], o["slots"]["itemid"], o["slots"]["q"]
  # Check if song currently playing. Stop it if True
  if os.path.exists(currentMediaPath):
    jellyfinStop = open(jellyfinStopFilePath, "w")
    jellyfinStop.close()
    time.sleep(1)
  # If not just an individual song, get the list of songs and their info. 
  if not q == "song":
    if itemid == "favourites":
      get = requests.get(jellyfinurl+"/Users/"+userid+"/Items?Recursive=true&Filters=IsFavorite&IncludeItemTypes=Audio", headers = headers)
    else:
      get = requests.get(jellyfinurl+"/Users/"+userid+"/Items?Recursive=true&IncludeItemTypes=Audio&parentId=" + itemid, headers = headers)
    receivedJson = json.loads(get.text)
    songs = receivedJson["Items"]
  # If individual song, just get one song's info
  else:
    get = requests.get(jellyfinurl+"/Users/"+userid+"/Items/" + itemid, headers = headers)
    songs = [json.loads(get.text)]
  for song in songs:
    songsList[0].append(song["Name"])
    songsList[1].append(song["Id"])
  # If user asked for shuffle (ps stands for play/shuffle), shuffle names and IDs in the same order.
  if ps == "shuffle":
    tmpShuffle = list(zip(songsList[0],songsList[1]))
    random.shuffle(tmpShuffle)
    songsList[0], songsList[1] = zip(*tmpShuffle)
    songsList[0], songsList[1] = list(songsList[0]), list(songsList[1])
  #Initialise song to zero, and begin loop for every song in the list
  songPos = 0
  if os.path.exists(jellyfinStopFilePath):
    os.remove(jellyfinStopFilePath)
  for song in songsList[0]:
    if os.path.exists(jellyfinStopFilePath):
      break
    # Download song using ID at the current index from the songList
    get = requests.get(jellyfinurl+"/Items/"+songsList[1][songPos]+"/Download", headers = headers)
    # If request successful, save file, and write the ID to a file which asks the playback script to begin.
    if get.status_code == 200:
      currentSong = open(currentMediaPath, "wb")
      currentSong.write(get.content)
      currentSong.close()
      jellyfinPlay = open(jellyfinPlayFilePath, "w")
      jellyfinPlay.write(songsList[1][songPos])
      jellyfinPlay.close()
    # Loop which only stops once currentMedia deleted (which signifies the end of the song). After this, increment song and loop back.
    while os.path.exists(currentMediaPath):
      if os.path.exists(jellyfinStopFilePath):
        break
    songPos += 1

elif intent == "JellyfinSkipSong":
  if not os.path.exists(currentMediaPath):
    speech("No songs are playing")
  jellyfinSkipSong = open(workingDir + "tmp/jellyfinSkipSong", "w")
  jellyfinSkipSong.close()

elif intent == "ChangeVolume":
  audioDevice = "Headphone"
  percentage = o["slots"]["percentage"]
  minBound, maxBound = 65, 95
  percentage = int(minBound+(percentage*((maxBound-minBound)/100)))
  call(["amixer", "sset", audioDevice, str(percentage) + "%"])
  call(["aplay", "/profiles/testSound.wav"])

elif intent == "UnitConversion":
    number, unit1, unit2 = float(o["slots"]["number"]), o["slots"]["unit1"], o["slots"]["unit2"]
# Length
    if unit1 == "metres":
        toBeConverted = number
    elif unit1 == "kilometres":
        toBeConverted = number*1000
    elif unit1 == "centimetres":
        toBeConverted = number/100
    elif unit1 == "millimetres":
        toBeConverted = number/1000
    elif unit1 == "miles":
        toBeConverted = number*1609.344
    elif unit1 == "feet":
        toBeConverted = number*0.3048
    elif unit1 == "inches":
        toBeConverted = number*0.0254
    elif unit1 == "yards":
        toBeConverted = number*0.9144

# Mass
    elif unit1 == "kilograms":
        toBeConverted = number
    elif unit1 == "tons":
        toBeConverted = number*1000
    elif unit1 == "grams":
        toBeConverted = number/1000
    elif unit1 == "ounces":
        toBeConverted = number*0.02834
    elif unit1 == "pounds":
        toBeConverted = number*0.4535
    elif unit1 == "stones":
        toBeConverted = number*6.35029

# Volume
    elif unit1 == "litres":
        toBeConverted = number
    elif unit1 == "millilitres":
        toBeConverted = number/1000
    elif unit1 == "centilitres":
        toBeConverted = number/100
    elif unit1 == "fluid ounces":
        toBeConverted = number*0.02841

# Doing the conversion
    if unit2 == "kilometres":
        finalValue = toBeConverted/1000
    elif unit2 == "metres":
        finalValue = toBeConverted
    elif unit2 == "centimetres":
        finalValue = toBeConverted*100
    elif unit2 == "millimetres":
        finalValue = toBeConverted*1000
    elif unit2 == "miles":
        finalValue = toBeConverted/1609.344
    elif unit2 == "feet":
        finalValue = toBeConverted*3.28084
    elif unit2 == "inches":
        finalValue = toBeConverted*39.37
    elif unit2 == "yards":
        finalValue = toBeConverted*1.093613

    elif unit2 == "tons":
        finalValue = toBeConverted/1000
    elif unit2 == "kilograms":
        finalValue = toBeConverted
    elif unit2 == "grams":
        finalValue = toBeConverted*1000
    elif unit2 == "ounces":
        finalValue = toBeConverted*35.27396
    elif unit2 == "pounds":
        finalValue = toBeConverted*2.2046
    elif unit2 == "stones":
        finalValue = toBeConverted*0.15747

    elif unit2 == "litres":
        finalValue = toBeConverted
    elif unit2 == "millilitres":
        finalValue = toBeConverted*1000
    elif unit2 == "centilitres":
        finalValue = toBeConverted*100
    elif unit2 == "fluid ounces":
        finalValue = toBeConverted*35.195

    speech(str(number) + " " + unit1 + " is " + str(round(finalValue,3)).replace("." , " point ") + " " + unit2)
